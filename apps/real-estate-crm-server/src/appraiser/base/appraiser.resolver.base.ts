/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Appraiser } from "./Appraiser";
import { AppraiserCountArgs } from "./AppraiserCountArgs";
import { AppraiserFindManyArgs } from "./AppraiserFindManyArgs";
import { AppraiserFindUniqueArgs } from "./AppraiserFindUniqueArgs";
import { CreateAppraiserArgs } from "./CreateAppraiserArgs";
import { UpdateAppraiserArgs } from "./UpdateAppraiserArgs";
import { DeleteAppraiserArgs } from "./DeleteAppraiserArgs";
import { PropertyFindManyArgs } from "../../property/base/PropertyFindManyArgs";
import { Property } from "../../property/base/Property";
import { AppraiserService } from "../appraiser.service";
@graphql.Resolver(() => Appraiser)
export class AppraiserResolverBase {
  constructor(protected readonly service: AppraiserService) {}

  async _appraisersMeta(
    @graphql.Args() args: AppraiserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Appraiser])
  async appraisers(
    @graphql.Args() args: AppraiserFindManyArgs
  ): Promise<Appraiser[]> {
    return this.service.appraisers(args);
  }

  @graphql.Query(() => Appraiser, { nullable: true })
  async appraiser(
    @graphql.Args() args: AppraiserFindUniqueArgs
  ): Promise<Appraiser | null> {
    const result = await this.service.appraiser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Appraiser)
  async createAppraiser(
    @graphql.Args() args: CreateAppraiserArgs
  ): Promise<Appraiser> {
    return await this.service.createAppraiser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Appraiser)
  async updateAppraiser(
    @graphql.Args() args: UpdateAppraiserArgs
  ): Promise<Appraiser | null> {
    try {
      return await this.service.updateAppraiser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Appraiser)
  async deleteAppraiser(
    @graphql.Args() args: DeleteAppraiserArgs
  ): Promise<Appraiser | null> {
    try {
      return await this.service.deleteAppraiser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Property], { name: "properties" })
  async findProperties(
    @graphql.Parent() parent: Appraiser,
    @graphql.Args() args: PropertyFindManyArgs
  ): Promise<Property[]> {
    const results = await this.service.findProperties(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
