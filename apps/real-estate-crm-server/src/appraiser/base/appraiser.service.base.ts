/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Appraiser as PrismaAppraiser,
  Property as PrismaProperty,
} from "@prisma/client";

export class AppraiserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AppraiserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.appraiser.count(args);
  }

  async appraisers(
    args: Prisma.AppraiserFindManyArgs
  ): Promise<PrismaAppraiser[]> {
    return this.prisma.appraiser.findMany(args);
  }
  async appraiser(
    args: Prisma.AppraiserFindUniqueArgs
  ): Promise<PrismaAppraiser | null> {
    return this.prisma.appraiser.findUnique(args);
  }
  async createAppraiser(
    args: Prisma.AppraiserCreateArgs
  ): Promise<PrismaAppraiser> {
    return this.prisma.appraiser.create(args);
  }
  async updateAppraiser(
    args: Prisma.AppraiserUpdateArgs
  ): Promise<PrismaAppraiser> {
    return this.prisma.appraiser.update(args);
  }
  async deleteAppraiser(
    args: Prisma.AppraiserDeleteArgs
  ): Promise<PrismaAppraiser> {
    return this.prisma.appraiser.delete(args);
  }

  async findProperties(
    parentId: string,
    args: Prisma.PropertyFindManyArgs
  ): Promise<PrismaProperty[]> {
    return this.prisma.appraiser
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .properties(args);
  }
}
